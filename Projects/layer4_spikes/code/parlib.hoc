objref pc
pc = new ParallelContext()
runtime = 0.0

proc prun() {local time, comptime, avgcomp, maxcomp
  time = startsw()
  if (pc.id == 0) { printf("setup time %g\n", time - starttime) }
  pc.set_maxstep(10)
  stdinit()
  if (pc.id == 0) { printf("init time %g\n", startsw() - time) }
  time = startsw()

  // DEBUG.
  wait_time = pc.wait_time()
  pc.psolve($1)
  wait_time = pc.wait_time() - wait_time //- pc.step_wait()
  //printf("pc, step_time, step_wait, and wait_time: %d %f %f %f\n" , int(pc.id()), pc.step_time(), pc.step_wait(), wait_time)
  printf("pc, step_time, wait_time: %d %f %f\n" , int(pc.id()), pc.step_time(), wait_time)

  if (pc.id == 0) {
    runtime = startsw() - time
    printf("run time %g\n", startsw() - time)
  }
  comptime = pc.step_time
  avgcomp = pc.allreduce(comptime, 1)/pc.nhost
  maxcomp = pc.allreduce(comptime, 2)
  if (pc.id == 0) {
    printf("maximum comp time %g\n", maxcomp)
    printf("approx exchange time %g\n", runtime - maxcomp)
  }
  if ((pc.id == 0) && (maxcomp != 0.0)) { printf("load balance = %g\n", avgcomp/maxcomp) }
}

proc finish() {
  if (pc.id == 0) printf("total time %g\n", startsw() - starttime)
  if (pc.nhost == 1) return
  pc.runworker()
  pc.done()
  quit()
}

proc register() {local gid  localobj nc, nil
  pc.set_gid2node($1, pc.id)
  nc = $o2.connect2target(nil)
  pc.cell($1, nc)
}

begintemplate Randstream
public r
objref r
proc init(){
  r = new Random()
  r.Random123($1,$2)
}
endtemplate Randstream
