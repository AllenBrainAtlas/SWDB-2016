function fn_savemesh(varargin)
% function fn_savemesh([filename,]vertices,faces)
% function fn_savemesh([filename,]{vertices,faces})
% function fn_savemesh([filename,]struct('vertices',vertices,'faces',faces))

% Thomas Deneux
% Copyright 2005-2012

if nargin<1, help fn_savemesh, return, end

curarg = 1;
if ischar(varargin{curarg})
    filename = varargin{curarg};
    curarg = curarg+1;
else
    filename=fn_savefile({'*.vtk;*.tri;*.mesh'});
end
if isempty(findstr(filename,'.')), filename = [filename '.tri']; end
[p name ext] = fileparts(filename);
if iscell(varargin{curarg})
    a = varargin{curarg};
    vertex = a{1};
    faces = a{2};
    curarg = curarg+1;
elseif isstruct(varargin{curarg})
    a = varargin{curarg};
    vertex = a.vertices;
    faces = a.faces;
    curarg = curarg+1;
else
    vertex = varargin{curarg};
    faces = varargin{curarg+1};
    curarg = curarg+2;    
end
if strcmp(ext,'.tri') && nargin>=curarg
    text = varargin{curarg};    
    ext = '.tri2';
end

if size(vertex,1)~=3
    if size(vertex,2)==3, vertex=vertex'; else error('vertex must be nx3 or 3xn'); end
end
if size(faces,1)~=3
    if size(faces,2)==3, faces=faces'; else error('faces must be nx3 or 3xn'); end
end
if any(faces-floor(faces) & faces<1 & faces>size(vertex,2))
    error('faces must contain positive integer values <= length(vertex)')
end

nvertex = size(vertex,2);
nfaces = size(faces,2);

fid=fopen(filename,'w');

switch lower(ext(2:end))
    
case 'vtk'
    
    chaine{1}='# vtk DataFile Version 2.0';
    chaine{2}=['File ',filename,' generated by Matlab'];
    chaine{3}='ASCII';
    chaine{4}='DATASET POLYDATA';
    chaine{5}=['POINTS ',int2str(nvertex),' float'];
    chaine{6}=['POLYGONS ',int2str(nfaces),' ',int2str(nfaces*4)];
    
    for i=1:5 fprintf(fid,'%s\n',chaine{i}); end
    fprintf(fid,'%f %f %f\n',vertex);
    fprintf(fid,'%s\n',chaine{6});
    fprintf(fid,'3 %d %d %d\n',faces-1);
    
case 'tri'
    
    normals=fn_meshnormals(vertex,faces);
    vertex=[vertex ; normals];
    fprintf(fid,'- %d\n',nvertex);
    fprintf(fid,'%f %f %f %d %d %d\n',vertex);
    
    fprintf(fid,'- %d %d %d\n',nfaces*ones(1,3));
    fprintf(fid,'%d %d %d\n',faces-1);

case 'tri2'
    
    vertex = reshape(vertex(:,faces),9,length(faces));
    if any(size(text)==1)
        cm = jet(256)'; 
        m = min(text)-.1; M = max(text)+.1;
        text = cm(:,ceil((text-m)/(M-m)*256));
    else
        if size(text,1)~=3, text=text'; end
    end
    text = reshape(text(:,faces),3,3,length(faces));
    text = floor(squeeze(mean(text,2))*256);
    data = [vertex ; text];

    fprintf(fid,'%f %f %f %f %f %f %f %f %f 0x%.2x%.2x%.2x\n',data);
    
case 'mesh'
    
    mesh_time=1;
    mesh_step=0;
    normals=fn_meshnormals(vertex,faces);
    arg_size=0;
    
    fwrite(fid, 'binar', 'uchar') ;
    fwrite(fid, 'DCBA', 'uchar') ;
    fwrite(fid, length('VOID'), 'uint32') ;
    fwrite(fid, 'VOID', 'uchar') ;
    
    fwrite(fid, size(faces,1), 'uint32') ;
    fwrite(fid, mesh_time, 'uint32') ;
    fwrite(fid, mesh_step, 'uint32') ;
    
    fwrite(fid, size(vertex,2), 'uint32') ;
    fwrite(fid, vertex, 'float32') ;
    
    fwrite(fid, size(normals,2), 'uint32') ;
    fwrite(fid, normals, 'float32') ;
    
    fwrite(fid, arg_size, 'uint32') ;
    fwrite(fid, size(faces,2), 'uint32') ;
    fwrite(fid, faces-1, 'uint32') ;
    
case 'obj'
    
    fprintf(fid,'v %f %f %f\n',vertex);
    
    normals=fn_meshnormals(vertex,faces);
    fprintf(fid,'vn %f %f %f\n',normals);

    fprintf(fid,'f %i//%i %i//%i %i//%i\n',faces([1 1 2 2 3 3],:));
    
end
    
fclose(fid);

